/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.DefaultCellEditor;
import javax.swing.JTable;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import javax.swing.JOptionPane;

/**
 *
 * @author Default
 */
public class Requests extends javax.swing.JFrame {

    /**
     * Creates new form Requests
     */
    public Requests() {
        initComponents();
        LeavePane.setVisible(true);       
        OverTimePane.setVisible(false);
        
        // Load data immediately when the frame is created
        loadLeaveRequestsData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        LeavePane = new javax.swing.JScrollPane();
        LeaveTable = new javax.swing.JTable();
        OverTimePane = new javax.swing.JScrollPane();
        OvertimeTable = new javax.swing.JTable();
        btnOvertimeRequest = new javax.swing.JButton();
        btnLeaveRequest = new javax.swing.JButton();
        saveRequestUpdateBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(255, 153, 0));

        jLabel1.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("List of Requests");

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LeaveTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "EmployeeID", "Leave Type", "Date Filed", "Start Date", "End Date", "Reason", "Status"
            }
        ));
        LeavePane.setViewportView(LeaveTable);

        jPanel2.add(LeavePane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1145, 520));

        OvertimeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "EmployeeID", "Date", "Start Time", "End Time", "Reason", "Status"
            }
        ));
        OverTimePane.setViewportView(OvertimeTable);

        jPanel2.add(OverTimePane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1145, 520));

        btnOvertimeRequest.setBackground(new java.awt.Color(255, 153, 0));
        btnOvertimeRequest.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        btnOvertimeRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnOvertimeRequest.setText("OVERTIME REQUESTS");
        btnOvertimeRequest.setBorderPainted(false);
        btnOvertimeRequest.setPreferredSize(new java.awt.Dimension(566, 28));
        btnOvertimeRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOvertimeRequestActionPerformed(evt);
            }
        });

        btnLeaveRequest.setBackground(new java.awt.Color(255, 153, 0));
        btnLeaveRequest.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        btnLeaveRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnLeaveRequest.setText("LEAVE REQUESTS");
        btnLeaveRequest.setBorderPainted(false);
        btnLeaveRequest.setPreferredSize(new java.awt.Dimension(566, 28));
        btnLeaveRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeaveRequestActionPerformed(evt);
            }
        });

        saveRequestUpdateBtn.setBackground(new java.awt.Color(255, 153, 0));
        saveRequestUpdateBtn.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        saveRequestUpdateBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveRequestUpdateBtn.setText("SAVE");
        saveRequestUpdateBtn.setBorderPainted(false);
        saveRequestUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRequestUpdateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnLeaveRequest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnOvertimeRequest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(572, 572, 572)
                .addComponent(saveRequestUpdateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(598, 598, 598))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(550, 550, 550)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLeaveRequest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOvertimeRequest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(saveRequestUpdateBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void loadLeaveRequestsData() {
        LeavePane.setVisible(true);       
        OverTimePane.setVisible(false);

DefaultTableModel model = (DefaultTableModel) LeaveTable.getModel();
    model.setRowCount(0);
    
  // Populate the table with data from the CSV file
   String csvFilePath = "db/Files/LeaveRequests.csv"; // Adjust path as necessary
    boolean foundRecords = false;

    try (BufferedReader br = new BufferedReader(new FileReader(csvFilePath))) {

    // Skip the first line
    String headerLine = br.readLine();
    String line;
    while ((line = br.readLine()) != null) {
        String[] data = line.split(",");
        if (data.length >= 7) {
            model.addRow(new Object[]{data[0], data[1], data[2], data[3], data[4], data[5], data[6]});
            foundRecords = true;
        }
    }
    } catch (IOException ex) {
    ex.printStackTrace();
    }    
    
    // Add dropdown button in the last column
   // Add dropdown button in the last column
    TableColumn lastColumn = LeaveTable.getColumnModel().getColumn(model.getColumnCount() - 1);
    lastColumn.setCellRenderer(new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (value != null && value.equals("Approved")) {
                setText("Approved");
            } else if (value != null && value.equals("Denied")) {
                setText("Denied");
           
            } else {
                setText("Pending");
            }
            return component;
        }
    });

    lastColumn.setCellEditor(new DefaultCellEditor(new JComboBox(new String[]{"Pending ", "Approved", "Denied"})));
    } 
    
    private void btnLeaveRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeaveRequestActionPerformed
    // TODO add your handling code here:
        loadLeaveRequestsData();
    }//GEN-LAST:event_btnLeaveRequestActionPerformed

    private void btnOvertimeRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOvertimeRequestActionPerformed
        LeavePane.setVisible(false);       
        OverTimePane.setVisible(true);
        DefaultTableModel model = (DefaultTableModel) OvertimeTable.getModel();
        model.setRowCount(0);
    
        // Populate the table with data from the CSV file
        populateOTTable(model, "db/Files/OvertimeRequest.csv");
    }//GEN-LAST:event_btnOvertimeRequestActionPerformed

    private void populateOTTable(DefaultTableModel model, String csvFilePath) {
    boolean foundRecords = false;
    
    try (BufferedReader br = new BufferedReader(new FileReader(csvFilePath))) {
        // Skip the first line
        String headerLine = br.readLine();
        String line;
        while ((line = br.readLine()) != null) {
            String[] data = line.split(",");
            if (data.length >= 6) {
                model.addRow(new Object[]{data[0], data[1], data[2], data[3], data[4], data[5]});
                foundRecords = true;
            }
        }
    } catch (IOException ex) {
        ex.printStackTrace();
    }    
    
    // Add dropdown button in the last column
    TableColumn lastColumn = OvertimeTable.getColumnModel().getColumn(model.getColumnCount() - 1);
    lastColumn.setCellRenderer(new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (value != null && value.equals("Approved")) {
                setText("Approved");
            } else if (value != null && value.equals("Denied")) {
                setText("Denied");
            } else {
                setText("Pending");
            }
            return component;
        }
    });

    lastColumn.setCellEditor(new DefaultCellEditor(new JComboBox(new String[]{"Pending ", "Approved", "Denied"})));
}
    
    private void saveRequestUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRequestUpdateBtnActionPerformed
                if (OverTimePane.isVisible()) {
                    saveData( "db/Files/OvertimeRequest.csv");
                } else if (LeavePane.isVisible()) {
                    saveData( "db/Files/LeaveRequests.csv");
                }
      
    }//GEN-LAST:event_saveRequestUpdateBtnActionPerformed

    private void saveData(String fileName) {
    String csvFilePath = "";
    DefaultTableModel model = null;

    if (OverTimePane.isVisible()) {
        csvFilePath = fileName;
        model = (DefaultTableModel) OvertimeTable.getModel();
    } else if (LeavePane.isVisible()) {
        csvFilePath = fileName;
        model = (DefaultTableModel) LeaveTable.getModel();
    }

    if (model == null) {
        System.out.println("No table is visible.");
        return;
    }

    try (FileWriter writer = new FileWriter(csvFilePath)) {
        int rowCount = model.getRowCount();
        int columnCount = model.getColumnCount();

        // Write column headers
        for (int i = 0; i < columnCount; i++) {
            writer.write(model.getColumnName(i));
            if (i < columnCount - 1) {
                writer.write(",");
            }
        }
        writer.write("\n");

        // Write data rows
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                Object value = model.getValueAt(i, j);
                if (value != null) {
                    writer.write(value.toString());
                }
                if (j < columnCount - 1) {
                    writer.write(",");
                }
            }
            writer.write("\n");
        }

        writer.flush();
    } catch (IOException e) {
        e.printStackTrace();
    }

    // Show a dialog box depending on the selected status
    int selectedRow = OverTimePane.isVisible() ? OvertimeTable.getSelectedRow() : LeaveTable.getSelectedRow();
    Object statusValue = model.getValueAt(selectedRow, model.getColumnCount() - 1);

    if (statusValue != null) {
        String message = "";
        if (statusValue.equals("Approved")) {
            message = "Request approved.";
        } else if (statusValue.equals("Denied")) {
            message = "Request denied.";
        } else {
            // Handle other statuses if needed
        }
        
        // Show dialog box and remove the Save button after selecting "Yes"
        int option = JOptionPane.showConfirmDialog(this, message + "\nSave the update?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(this, "Update saved.");
            model.fireTableDataChanged();
            
        }
    }
}
    
    
//  private void saveData(String fileName) {
//    String csvFilePath = "";
//    DefaultTableModel model = null;
//
//    if (OverTimePane.isVisible()) {
//        csvFilePath = fileName;
//        model = (DefaultTableModel) OvertimeTable.getModel();
//    } else if (LeavePane.isVisible()) {
//        csvFilePath = fileName;
//        model = (DefaultTableModel) LeaveTable.getModel();
//    }
//
//    if (model == null) {
//        System.out.println("No table is visible.");
//        return;
//    }
//
//    try (FileWriter writer = new FileWriter(csvFilePath)) {
//        int rowCount = model.getRowCount();
//        int columnCount = model.getColumnCount();
//
//        // Write column headers
//        for (int i = 0; i < columnCount; i++) {
//            writer.write(model.getColumnName(i));
//            if (i < columnCount - 1) {
//                writer.write(",");
//            }
//        }
//        writer.write("\n");
//
//        // Write data rows
//        for (int i = 0; i < rowCount; i++) {
//            for (int j = 0; j < columnCount; j++) {
//                Object value = model.getValueAt(i, j);
//                if (value != null) {
//                    writer.write(value.toString());
//                }
//                if (j < columnCount - 1) {
//                    writer.write(",");
//                }
//            }
//            writer.write("\n");
//        }
//
//        writer.flush();
//    } catch (IOException e) {
//        e.printStackTrace();
//    }
//}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Requests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Requests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Requests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Requests.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Requests().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane LeavePane;
    private javax.swing.JTable LeaveTable;
    private javax.swing.JScrollPane OverTimePane;
    private javax.swing.JTable OvertimeTable;
    private javax.swing.JButton btnLeaveRequest;
    private javax.swing.JButton btnOvertimeRequest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton saveRequestUpdateBtn;
    // End of variables declaration//GEN-END:variables
}
